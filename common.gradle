apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"
apply plugin: "com.github.ben-manes.versions"

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "file:$buildDir/maven")
        pom.project {
            name = archivesBaseName
            url = pj.siteUrl

            groupId = pj.groupId
            artifactId = archivesBaseName
            version = pj.versions.name
            licenses {
                license {
                    name = "The MIT License"
                    url = "https://opensource.org/licenses/MIT"
                    distribution = "repo"
                }
            }
            scm {
                connection = pj.scmConnection
                url = pj.githubUrl
            }
        }
    }
}

publishing {
    publications {
        bintray(MavenPublication) {
            artifact("$buildDir/outputs/aar/${archivesBaseName}-release.aar")
            groupId = pj.groupId
            artifactId = archivesBaseName
            version = pj.versions.name

            artifact sourcesJar

            pom.withXml {
                def node = asNode()

                def licenses = node.appendNode("licenses")
                appendLicense(licenses, "The MIT License", "https://opensource.org/licenses/MIT", "repo")

                appendScm(node, pj.scmConnection, pj.githubUrl)

                def dependencies = node.appendNode("dependencies")
                configurations.api.dependencies.each {
                    appendDependency(dependencies, it.group, it.name, it.version, "compile")
                }
                configurations.implementation.dependencies.each {
                    appendDependency(dependencies, it.group, it.name, it.version, "runtime")
                }
            }
        }
    }
}

static def appendLicense(parentNode, name, url, distribution) {
    def node = parentNode.appendNode("license")
    node.appendNode("name", name)
    node.appendNode("url", url)
    node.appendNode("distribution", distribution)
}

static def appendScm(parentNode, connection, url) {
    def node = parentNode.appendNode("scm")
    node.appendNode("connection", connection)
    node.appendNode("url", url)
}

static def appendDependency(parentNode, groupId, artifactId, version, scope) {
    def node = parentNode.appendNode("dependency")
    node.appendNode("groupId", groupId)
    node.appendNode("artifactId", artifactId)
    node.appendNode("version", version)
    node.appendNode("scope", scope)
}

bintray {
    user = project.hasProperty("bintray_user") ? bintray_user : ""
    key = project.hasProperty("bintray_key") ? bintray_key : ""
    publications = ["bintray"]

    pkg {
        repo = "maven"
        name = pj.groupId + "." + archivesBaseName
        licenses = ["MIT"]
        websiteUrl = pj.siteUrl
        issueTrackerUrl = pj.githubUrl + "/blob/master/LICENSE"
        vcsUrl = pj.githubUrl + ".git"
        issueTrackerUrl = pj.githubUrl + "/issues"
        publicDownloadNumbers = true
        version {
            name = project.version
        }
    }
}

bintrayUpload.dependsOn assemble

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview", "b", "ea"].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
            }
            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}
